#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([image],[],[image name],[ubuntu])
# ARG_OPTIONAL_SINGLE([tag],[],[image tag],[rolling])
# ARG_POSITIONAL_SINGLE([dir],[directory to be shared with the countainer],[])
# ARG_HELP([Run a docker container and with a shared directory.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_image="ubuntu"
_arg_tag="rolling"
# _arg_platform="linux/amd64"
_arg_platform="linux/arm64/8"


print_help()
{
	printf '%s\n' "Run a docker container and with a shared directory."
	printf 'Usage: %s [--image <arg>] [--tag <arg>] [-h|--help] <dir>\n' "$0"
	printf '\t%s\n' "<dir>: directory to be shared with the countainer"
	printf '\t%s\n' "--image: image name (default: 'ubuntu')"
	printf '\t%s\n' "--tag: image tag (default: 'rolling')"
	printf '\t%s\n' "--platform: image platform (default: 'linux/amd64')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--image)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_image="$2"
				shift
				;;
			--image=*)
				_arg_image="${_key##--image=}"
				;;
			--tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tag="$2"
				shift
				;;
			--tag=*)
				_arg_tag="${_key##--tag=}"
				;;
			--platform)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_platform="$2"
				shift
				;;
			--platform=*)
				_arg_platform="${_key##--platform=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'dir'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

dirpath=$(greadlink -f $_arg_dir)

docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
    -v $dirpath:/$(basename $dirpath) -w /$(basename $dirpath) \
    --platform $_arg_platform -it $_arg_image:$_arg_tag /bin/bash

# ] <-- needed because of Argbash
